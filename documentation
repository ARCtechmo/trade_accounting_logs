*** Under Development ***

Section 1: Description
The documentation is  a guide to utilize the database and the set of python program files.
This is not a completely automated system and the program is specifically designed to work with specific broker 
data that must be dowloaded as .csv files directly from the broker's website.  This application is designed for 
FOREX.com, Interactive Brokers, and TD Ameritrade .csv files.    


Section 2: Installation Requirements
-This application requires Python3 and sqlite3 to be installed on your machine.  
-The sqlite DBbrowser is also recommended if you want to use a GUI. There are other sqlite GUIs available.   
-A text editor such as VSCode or VIM or EMACS (there are many others available) is required.

Section 3: Quickstart Guide

1. Create a directory (folder) where you will run this application. 

2. Download the python files to the folder you created (or clone the repository).
-You need the following files: database.py, broker.py, export.py, fx.py, ib.py, td.py, exprev.py, and time_logs.py.
-Either clone the entire repository or open each file and save it to the directory (folder) you created.

3. Install python3.  
-Ensure you have python3 installed on your machine.  
-The method of installation varies depending on your system.  
-Python3 installer may give you an option to set the file path automatically. 
-Ensure that the $PATH is set so python will execute in the directory where you run this application. 

4. Install sqlite3 and the DBbrowser.  
-Again it is very important that you set your $PATH so sqlite3 and the DBbrowser will execute. 
-For most Linux systems sqlite3 is already installed.  For Windows and MacOS you will need to download and install sqlite3.
-For Windows ensure all of the python files and sqlite.exe files are in the same directory.
-The following links provide download and installation instructions for sqlite3 and the DBbrowser:  
-sqlite.org,sqlitetutorial.net, DBbrowser.org

5. Run the database.py file.
-The database.py file creates the database upon initial use.
-The database.py file also executes the queries on the database and therefore must be opened each time you run the application. 
-You must also manually close the database once you are finished.  It is not a good idea to leave the app open.
-You must manually open the database each time you run this application. 
-Open the database.py file in your text editor.
-Scroll to the last line of code where it says "conn.close()" and comment out this line. 
-Now tun the program in your terminal. 
-Navigate to your directory:
-For GNU/Linux systems  type "./python3 database.py"
-For Windows systems type "python database.py" 
-The database should now be open. 
-Check to ensure the database was successfully created with the GUI or in the terminal.  
-For GNU/Linux and Windows type "sqlite3" then type ".open database.db" then type .schema.  The db schema should appear.    
-Use the GUI. Use the sqlite DBbrowser you installed to open the database.db file.  There is a tab called "open database."

6. View / Modify the brokers.py file.  
-The brokers.py  file creates the foreign key relationships for the brokers and the activity types (e.g. trading, accounting, etc...).
-The first time you run this program you need to view and accept the defaults or modify them. 
-Use your text editor to open the brokers.py file.  
-There are two arrays (or lists) in the brokers.py file called "bk_name" and "activity_name".
-The numbers are the foreign keys and broker names or activity type.
-For instance, (3,FOREX_com) will assign the foreign key "3" to "FOREX_com" in the broker_id table.
-**Important** If you change a foreign key number then you will need to go into the corresponding python file to reflect that change.
-For example, if you change (3, "FOREX_com) to (1,"FORE_COM") then open the fx.py file, find the broker_id varialbe and change it (broker_id = 3 to broker_id = 2).
-You can also modify the "activity_name" array in the brokers.py file by adding categories and / or modifying the numbers.  
-The FK relationships in the "activity_name" array are tied to the time_logs.py file.  You will need these foreign keys when you create time logs. 
-Now go to the terminal and run the "brokers.py" file.  
-In GNU / Linux type "python3 brokers.py".
-In Windows type "python brokers.py" .
-It will prompt the user to establish the foreign key relatiionships.  select "y" or "yes" for both.  
-Open the GUI and check the activity_log and brokers tables to ensure they tables contain the foreign keys.     
     
7. Run the export.py file.   

Here is the process to utilize the file:
1. Log on to your broker account.
2. Select the the month and range (first day to last day) and get the data.
3. ***IMPORTANT*** Select the first and last day of the month / year.  Do not vary the data range.
4. Select .csv format and download the file to the same directory as the fx_dev_mode.py file.
5. ***IMPORTANT*** Select the broker number (this is programmed into the code as 3) 
     -  This number should match the foreign key in the "brokers" table of the database
     -  This number is tied to the foreign key relationships in the data and must be typed in correctly
     -  If you select the wrong number this will result in incorrect relations in the database



Known Bugs and Workarounds

Bug #1
Files: fx.py file timestamps and dates
Criticality: low
-The fx.py files formats the dates.  
-Alpha testing revealed the program may return a '[]' in the HH:MM section of some of the entry_date and exit_date columns in the fx_log table. 
-This is a minor bug that does not affect the ability of the program to run properly.  
-This bug will be corrected in future updates. 

-Workaround: none

  
Possible Bug #2
Files: time_logs.py file
-Criticality: low 
-This is not so much about bugs but, rather, about incomplete testing.
-The program takes user input for entry time logs and exit time logs implemented via a long series of while loops and if-else statements.
-While the program bascially works and accounts for most common user inputs and user errors I did not test every possible pathway.
-Further refinements and testing is required.

-Workaround: Yes. 
-The user can easily delete the time log from the database and renter a new one. 
